{
  "name": "PingPong",
  "tagline": "Javascript+HTML5",
  "body": "\r\n<div class=\"container-fluid\" style=\"margin-top: 100px;\">\r\n<canvas id=\"canvas\"></canvas>\r\n<audio preload=\"true\" id=\"collide\">\r\n\t<source src=\"http://dl.dropbox.com/u/26141789/canvas/pingpong/Metal%20Cling%20-%20Hit.mp3\" />\r\n\t<source src=\"http://dl.dropbox.com/u/26141789/canvas/pingpong/Metal%20Cling%20-%20Hit.wav\" />\r\n</audio>\r\n</div>\r\n<script type=\"text/javascript\">\r\n//RequestAnimFrame: a browser API for getting smooth animations\r\nwindow.requestAnimFrame = (function(){\r\n\treturn  window.requestAnimationFrame       || \r\n\t\twindow.webkitRequestAnimationFrame || \r\n\t\twindow.mozRequestAnimationFrame    || \r\n\t\twindow.oRequestAnimationFrame      || \r\n\t\twindow.msRequestAnimationFrame     ||  \r\n\t\tfunction( callback ){\r\n\t\t\treturn window.setTimeout(callback, 1000 / 60);\r\n\t\t};\r\n})();\r\n\r\nwindow.cancelRequestAnimFrame = ( function() {\r\n\treturn window.cancelAnimationFrame          ||\r\n\t\twindow.webkitCancelRequestAnimationFrame    ||\r\n\t\twindow.mozCancelRequestAnimationFrame       ||\r\n\t\twindow.oCancelRequestAnimationFrame     ||\r\n\t\twindow.msCancelRequestAnimationFrame        ||\r\n\t\tclearTimeout\r\n} )();\r\n\r\n\r\n// Initialize canvas and required variables\r\nvar canvas = document.getElementById(\"canvas\"),\r\n\t\tctx = canvas.getContext(\"2d\"), // Create canvas context\r\n\t\tW = 800, // Window's width\r\n\t\tH = 500, // Window's height\r\n\t\tparticles = [], // Array containing particles\r\n\t\tball = {}, // Ball object\r\n\t\tpaddles = [2], // Array containing two paddles\r\n\t\tmouse = {}, // Mouse object to store it's current position\r\n\t\tpoints = 0, // Varialbe to store points\r\n\t\tfps = 60, // Max FPS (frames per second)\r\n\t\tparticlesCount = 20, // Number of sparks when ball strikes the paddle\r\n\t\tflag = 0, // Flag variable which is changed on collision\r\n\t\tparticlePos = {}, // Object to contain the position of collision \r\n\t\tmultipler = 1, // Varialbe to control the direction of sparks\r\n\t\tstartBtn = {}, // Start button object\r\n\t\trestartBtn = {}, // Restart button object\r\n\t\tover = 0, // flag varialbe, cahnged when the game is over\r\n\t\tinit, // variable to initialize animation\r\n\t\tpaddleHit;\r\n\r\n// Add mousemove and mousedown events to the canvas\r\ncanvas.addEventListener(\"mousemove\", trackPosition, true);\r\ncanvas.addEventListener(\"mousedown\", btnClick, true);\r\n\r\n// Initialise the collision sound\r\ncollision = document.getElementById(\"collide\");\r\n\r\n// Set the canvas's height and width to full screen\r\ncanvas.width = W;\r\ncanvas.height = H;\r\n\r\n// Function to paint canvas\r\nfunction paintCanvas() {\r\n\tctx.fillStyle = \"lime\";\r\n\tctx.fillRect(0, 0, W, H);\r\n}\r\n\r\n// Function for creating paddles\r\nfunction Paddle(pos) {\r\n\t// Height and width\r\n\tthis.h = 5;\r\n\tthis.w = 150;\r\n\t\r\n\t// Paddle's position\r\n\tthis.x = W/2 - this.w/2;\r\n\tthis.y = (pos == \"top\") ? 0 : H - this.h;\r\n\t\r\n}\r\n\r\n// Push two new paddles into the paddles[] array\r\npaddles.push(new Paddle(\"bottom\"));\r\npaddles.push(new Paddle(\"top\"));\r\n\r\n// Ball object\r\nball = {\r\n\tx: 100,\r\n\ty: 100, \r\n\tr: 10,\r\n\tc: \"white\",\r\n\tvx: 4,\r\n\tvy: 8,\r\n\t\r\n\t// Function for drawing ball on canvas\r\n\tdraw: function() {\r\n\t\tctx.beginPath();\r\n\t\tctx.fillStyle = this.c;\r\n\t\tctx.arc(this.x, this.y, this.r, 0, Math.PI*2, false);\r\n\t\tctx.fill();\r\n\t}\r\n};\r\n\r\n\r\n// Start Button object\r\nstartBtn = {\r\n\tw: 100,\r\n\th: 50,\r\n\tx: W/2 - 50,\r\n\ty: H/2 - 25,\r\n\t\r\n\tdraw: function() {\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.lineWidth = \"2\";\r\n\t\tctx.strokeRect(this.x, this.y, this.w, this.h);\r\n\t\t\r\n\t\tctx.font = \"18px Arial, sans-serif\";\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"middle\";\r\n\t\tctx.fillStlye = \"white\";\r\n\t\tctx.fillText(\"Start\", W/2, H/2 );\r\n\t}\r\n};\r\n\r\n// Restart Button object\r\nrestartBtn = {\r\n\tw: 100,\r\n\th: 50,\r\n\tx: W/2 - 50,\r\n\ty: H/2 - 50,\r\n\t\r\n\tdraw: function() {\r\n\t\tctx.strokeStyle = \"white\";\r\n\t\tctx.lineWidth = \"2\";\r\n\t\tctx.strokeRect(this.x, this.y, this.w, this.h);\r\n\t\t\r\n\t\tctx.font = \"18px Arial, sans-serif\";\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"middle\";\r\n\t\tctx.fillStlye = \"white\";\r\n\t\tctx.fillText(\"Restart\", W/2, H/2 - 25 );\r\n\t}\r\n};\r\n\r\n// Function for creating particles object\r\nfunction createParticles(x, y, m) {\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\t\r\n\tthis.radius = 1.2;\r\n\t\r\n\tthis.vx = -1.5 + Math.random()*3;\r\n\tthis.vy = m * Math.random()*1.5;\r\n}\r\n\r\n// Draw everything on canvas\r\nfunction draw() {\r\n\tpaintCanvas();\r\n\tfor(var i = 0; i < paddles.length; i++) {\r\n\t\tp = paddles[i];\r\n\t\t\r\n\t\tctx.fillStyle = \"white\";\r\n\t\tctx.fillRect(p.x, p.y, p.w, p.h);\r\n\t}\r\n\t\r\n\tball.draw();\r\n\tupdate();\r\n}\r\n\r\n// Function to increase speed after every 5 points\r\nfunction increaseSpd() {\r\n\tif(points % 4 == 0) {\r\n\t\tif(Math.abs(ball.vx) < 15) {\r\n\t\t\tball.vx += (ball.vx < 0) ? -1 : 1;\r\n\t\t\tball.vy += (ball.vy < 0) ? -2 : 2;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Track the position of mouse cursor\r\nfunction trackPosition(e) {\r\n\tmouse.x = e.pageX;\r\n\tmouse.y = e.pageY;\r\n}\r\n\r\n// Function to update positions, score and everything.\r\n// Basically, the main game logic is defined here\r\nfunction update() {\r\n\t\r\n\t// Update scores\r\n\tupdateScore(); \r\n\t\r\n\t// Move the paddles on mouse move\r\n\tif(mouse.x && mouse.y) {\r\n\t\tfor(var i = 1; i < paddles.length; i++) {\r\n\t\t\tp = paddles[i];\r\n\t\t\tp.x = mouse.x - p.w/2;\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t// Move the ball\r\n\tball.x += ball.vx;\r\n\tball.y += ball.vy;\r\n\t\r\n\t// Collision with paddles\r\n\tp1 = paddles[1];\r\n\tp2 = paddles[2];\r\n\t\r\n\t// If the ball strikes with paddles,\r\n\t// invert the y-velocity vector of ball,\r\n\t// increment the points, play the collision sound,\r\n\t// save collision's position so that sparks can be\r\n\t// emitted from that position, set the flag variable,\r\n\t// and change the multiplier\r\n\tif(collides(ball, p1)) {\r\n\t\tcollideAction(ball, p1);\r\n\t}\r\n\t\r\n\t\r\n\telse if(collides(ball, p2)) {\r\n\t\tcollideAction(ball, p2);\r\n\t} \r\n\t\r\n\telse {\r\n\t\t// Collide with walls, If the ball hits the top/bottom,\r\n\t\t// walls, run gameOver() function\r\n\t\tif(ball.y + ball.r > H) {\r\n\t\t\tball.y = H - ball.r;\r\n\t\t\tgameOver();\r\n\t\t} \r\n\t\t\r\n\t\telse if(ball.y < 0) {\r\n\t\t\tball.y = ball.r;\r\n\t\t\tgameOver();\r\n\t\t}\r\n\t\t\r\n\t\t// If ball strikes the vertical walls, invert the \r\n\t\t// x-velocity vector of ball\r\n\t\tif(ball.x + ball.r > W) {\r\n\t\t\tball.vx = -ball.vx;\r\n\t\t\tball.x = W - ball.r;\r\n\t\t}\r\n\t\t\r\n\t\telse if(ball.x -ball.r < 0) {\r\n\t\t\tball.vx = -ball.vx;\r\n\t\t\tball.x = ball.r;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t// If flag is set, push the particles\r\n\tif(flag == 1) { \r\n\t\tfor(var k = 0; k < particlesCount; k++) {\r\n\t\t\tparticles.push(new createParticles(particlePos.x, particlePos.y, multiplier));\r\n\t\t}\r\n\t}\t\r\n\t\r\n\t// Emit particles/sparks\r\n\temitParticles();\r\n\t\r\n\t// reset flag\r\n\tflag = 0;\r\n}\r\n\r\n//Function to check collision between ball and one of\r\n//the paddles\r\nfunction collides(b, p) {\r\n\tif(b.x + ball.r >= p.x && b.x - ball.r <=p.x + p.w) {\r\n\t\tif(b.y >= (p.y - p.h) && p.y > 0){\r\n\t\t\tpaddleHit = 1;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\telse if(b.y <= p.h && p.y == 0) {\r\n\t\t\tpaddleHit = 2;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\telse return false;\r\n\t}\r\n}\r\n\r\n//Do this when collides == true\r\nfunction collideAction(ball, p) {\r\n\tball.vy = -ball.vy;\r\n\t\r\n\tif(paddleHit == 1) {\r\n\t\tball.y = p.y - p.h;\r\n\t\tparticlePos.y = ball.y + ball.r;\r\n\t\tmultiplier = -1;\t\r\n\t}\r\n\t\r\n\telse if(paddleHit == 2) {\r\n\t\tball.y = p.h + ball.r;\r\n\t\tparticlePos.y = ball.y - ball.r;\r\n\t\tmultiplier = 1;\t\r\n\t}\r\n\t\r\n\tpoints++;\r\n\tincreaseSpd();\r\n\t\r\n\tif(collision) {\r\n\t\tif(points > 0) \r\n\t\t\tcollision.pause();\r\n\t\t\r\n\t\tcollision.currentTime = 0;\r\n\t\tcollision.play();\r\n\t}\r\n\t\r\n\tparticlePos.x = ball.x;\r\n\tflag = 1;\r\n}\r\n\r\n// Function for emitting particles\r\nfunction emitParticles() { \r\n\tfor(var j = 0; j < particles.length; j++) {\r\n\t\tpar = particles[j];\r\n\t\t\r\n\t\tctx.beginPath(); \r\n\t\tctx.fillStyle = \"white\";\r\n\t\tif (par.radius > 0) {\r\n\t\t\tctx.arc(par.x, par.y, par.radius, 0, Math.PI*2, false);\r\n\t\t}\r\n\t\tctx.fill();\t \r\n\t\t\r\n\t\tpar.x += par.vx; \r\n\t\tpar.y += par.vy; \r\n\t\t\r\n\t\t// Reduce radius so that the particles die after a few seconds\r\n\t\tpar.radius = Math.max(par.radius - 0.05, 0.0); \r\n\t\t\r\n\t} \r\n}\r\n\r\n// Function for updating score\r\nfunction updateScore() {\r\n\tctx.fillStlye = \"white\";\r\n\tctx.font = \"16px Arial, sans-serif\";\r\n\tctx.textAlign = \"left\";\r\n\tctx.textBaseline = \"top\";\r\n\tctx.fillText(\"Score: \" + points, 20, 20 );\r\n}\r\n\r\n// Function to run when the game overs\r\nfunction gameOver() {\r\n\tctx.fillStlye = \"white\";\r\n\tctx.font = \"20px Arial, sans-serif\";\r\n\tctx.textAlign = \"center\";\r\n\tctx.textBaseline = \"middle\";\r\n\tctx.fillText(\"Game Over - You scored \"+points+\" points!\", W/2, H/2 + 25 );\r\n\t\r\n\t// Stop the Animation\r\n\tcancelRequestAnimFrame(init);\r\n\t\r\n\t// Set the over flag\r\n\tover = 1;\r\n\t\r\n\t// Show the restart button\r\n\trestartBtn.draw();\r\n}\r\n\r\n// Function for running the whole animation\r\nfunction animloop() {\r\n\tinit = requestAnimFrame(animloop);\r\n\tdraw();\r\n}\r\n\r\n// Function to execute at startup\r\nfunction startScreen() {\r\n\tdraw();\r\n\tstartBtn.draw();\r\n}\r\n\r\n// On button click (Restart and start)\r\nfunction btnClick(e) {\r\n\t\r\n\t// Variables for storing mouse position on click\r\n\tvar mx = e.pageX,\r\n\t\t\tmy = e.pageY;\r\n\t\r\n\t// Click start button\r\n\tif(mx >= startBtn.x && mx <= startBtn.x + startBtn.w) {\r\n\t\tanimloop();\r\n\t\t\r\n\t\t// Delete the start button after clicking it\r\n\t\tstartBtn = {};\r\n\t}\r\n\t\r\n\t// If the game is over, and the restart button is clicked\r\n\tif(over == 1) {\r\n\t\tif(mx >= restartBtn.x && mx <= restartBtn.x + restartBtn.w) {\r\n\t\t\tball.x = 20;\r\n\t\t\tball.y = 20;\r\n\t\t\tpoints = 0;\r\n\t\t\tball.vx = 4;\r\n\t\t\tball.vy = 8;\r\n\t\t\tanimloop();\r\n\t\t\t\r\n\t\t\tover = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Show the start screen\r\nstartScreen();\r\n\r\n</script>\r\n</body>\r\n\r\n</html>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}